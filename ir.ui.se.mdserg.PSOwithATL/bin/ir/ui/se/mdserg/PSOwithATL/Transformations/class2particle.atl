-- @atlcompiler emftvm
module class2particle;

create OUT: particleCRA  from IN: architectureCRA ;

helper def : id : Integer = 0;

helper def : fSize : Integer = architectureCRA!Feature.allInstances().size() ;

helper def : testRand(i : Integer) : Integer = 
	let rnd : "#native"!"java::util::Random" = "#native"!"java::util::Random".newInstance() in rnd.nextInt(i) + 1;
	

rule att2att{
	from 
		attr : architectureCRA!Attribute
	to 
		parA : particleCRA!Attribute(
			name <- attr.name,
			classname <- 'class' + thisModule.testRand(thisModule.fSize).toString() 
		)
	do{
		 thisModule.id <- thisModule.id + 1;
		 parA.id <- thisModule.id; 
	}
}

rule method2method{
	from 
		cm : architectureCRA!Method
	to 
		parM : particleCRA!Method(
			name <- cm.name,
			functionalDependency <- cm.functionalDependency,
			dataDependency <- cm.dataDependency,
			classname <- 'class' + thisModule.testRand(thisModule.fSize).toString()
		)
	do{
		 thisModule.id <- thisModule.id + 1;
		 parM.id <- thisModule.id;
	}
}

